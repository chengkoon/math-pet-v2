/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * This API exposes endpoints to manage entities and items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface ImportExamPaperDataRequest {
    org: string;
}

export interface ImportExamPaperDataLegacyRequest {
    structureJsonPath: string;
    questionsJsonPath: string;
}

/**
 * 
 */
export class ExamPaperImportControllerApi extends runtime.BaseAPI {

    /**
     */
    async importExamPaperDataRaw(requestParameters: ImportExamPaperDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['org'] == null) {
            throw new runtime.RequiredError(
                'org',
                'Required parameter "org" was null or undefined when calling importExamPaperData().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['org'] != null) {
            queryParameters['org'] = requestParameters['org'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/papers/import`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async importExamPaperData(requestParameters: ImportExamPaperDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.importExamPaperDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async importExamPaperDataLegacyRaw(requestParameters: ImportExamPaperDataLegacyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['structureJsonPath'] == null) {
            throw new runtime.RequiredError(
                'structureJsonPath',
                'Required parameter "structureJsonPath" was null or undefined when calling importExamPaperDataLegacy().'
            );
        }

        if (requestParameters['questionsJsonPath'] == null) {
            throw new runtime.RequiredError(
                'questionsJsonPath',
                'Required parameter "questionsJsonPath" was null or undefined when calling importExamPaperDataLegacy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['structureJsonPath'] != null) {
            queryParameters['structureJsonPath'] = requestParameters['structureJsonPath'];
        }

        if (requestParameters['questionsJsonPath'] != null) {
            queryParameters['questionsJsonPath'] = requestParameters['questionsJsonPath'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/papers/import/legacy`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async importExamPaperDataLegacy(requestParameters: ImportExamPaperDataLegacyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.importExamPaperDataLegacyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
