/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * This API exposes endpoints to manage entities and items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PagedQuestions,
  QuestionResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PagedQuestionsFromJSON,
    PagedQuestionsToJSON,
    QuestionResponseFromJSON,
    QuestionResponseToJSON,
} from '../models/index';

export interface GetAllQuestionsRequest {
    page?: number;
    size?: number;
}

export interface GetQuestionByIdRequest {
    id: number;
}

export interface SearchQuestionsRequest {
    subjectId?: number;
    levelId?: number;
    subStrandIds?: Array<number>;
    questionTypeId?: number;
    page?: number;
    size?: number;
}

/**
 * 
 */
export class QuestionsApi extends runtime.BaseAPI {

    /**
     * Retrieve a paginated list of questions
     * Get all questions
     */
    async getAllQuestionsRaw(requestParameters: GetAllQuestionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedQuestions>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/questions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedQuestionsFromJSON(jsonValue));
    }

    /**
     * Retrieve a paginated list of questions
     * Get all questions
     */
    async getAllQuestions(requestParameters: GetAllQuestionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedQuestions> {
        const response = await this.getAllQuestionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a single question by its ID
     * Get question by ID
     */
    async getQuestionByIdRaw(requestParameters: GetQuestionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getQuestionById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/questions/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a single question by its ID
     * Get question by ID
     */
    async getQuestionById(requestParameters: GetQuestionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionResponse> {
        const response = await this.getQuestionByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for questions based on various criteria
     * Search questions by criteria
     */
    async searchQuestionsRaw(requestParameters: SearchQuestionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedQuestions>> {
        const queryParameters: any = {};

        if (requestParameters['subjectId'] != null) {
            queryParameters['subjectId'] = requestParameters['subjectId'];
        }

        if (requestParameters['levelId'] != null) {
            queryParameters['levelId'] = requestParameters['levelId'];
        }

        if (requestParameters['subStrandIds'] != null) {
            queryParameters['subStrandIds'] = requestParameters['subStrandIds'];
        }

        if (requestParameters['questionTypeId'] != null) {
            queryParameters['questionTypeId'] = requestParameters['questionTypeId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/questions/search`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedQuestionsFromJSON(jsonValue));
    }

    /**
     * Search for questions based on various criteria
     * Search questions by criteria
     */
    async searchQuestions(requestParameters: SearchQuestionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedQuestions> {
        const response = await this.searchQuestionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
