/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * This API exposes endpoints to manage entities and items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClaudePromptRequest,
  ClaudeResponse,
  ErrorResponse,
  ExtractQuestionsJobResponse,
  ExtractQuestionsJobStatus,
} from '../models/index';
import {
    ClaudePromptRequestFromJSON,
    ClaudePromptRequestToJSON,
    ClaudeResponseFromJSON,
    ClaudeResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ExtractQuestionsJobResponseFromJSON,
    ExtractQuestionsJobResponseToJSON,
    ExtractQuestionsJobStatusFromJSON,
    ExtractQuestionsJobStatusToJSON,
} from '../models/index';

export interface ExtractQuestionsFromPdfRequest {
    examPackName: string;
    xAnthropicAPIKey?: string;
}

export interface GetExtractionJobStatusRequest {
    jobId: string;
}

export interface ProcessExamPdfRequest {
    examPackName: string;
    pdfFile: Blob;
    xAnthropicAPIKey?: string;
}

export interface SendPromptToClaudeRequest {
    claudePromptRequest: ClaudePromptRequest;
    xAnthropicAPIKey?: string;
}

/**
 * 
 */
export class ClaudeApi extends runtime.BaseAPI {

    /**
     * Extract questions using Claude AI from a previously-processed exam PDF identified by examPackName
     * Extract questions from a previously-processed exam pdf
     */
    async extractQuestionsFromPdfRaw(requestParameters: ExtractQuestionsFromPdfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtractQuestionsJobResponse>> {
        if (requestParameters['examPackName'] == null) {
            throw new runtime.RequiredError(
                'examPackName',
                'Required parameter "examPackName" was null or undefined when calling extractQuestionsFromPdf().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['examPackName'] != null) {
            queryParameters['examPackName'] = requestParameters['examPackName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAnthropicAPIKey'] != null) {
            headerParameters['X-Anthropic-API-Key'] = String(requestParameters['xAnthropicAPIKey']);
        }


        let urlPath = `/api/claude/extract-questions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtractQuestionsJobResponseFromJSON(jsonValue));
    }

    /**
     * Extract questions using Claude AI from a previously-processed exam PDF identified by examPackName
     * Extract questions from a previously-processed exam pdf
     */
    async extractQuestionsFromPdf(requestParameters: ExtractQuestionsFromPdfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtractQuestionsJobResponse> {
        const response = await this.extractQuestionsFromPdfRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get extraction job status
     */
    async getExtractionJobStatusRaw(requestParameters: GetExtractionJobStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtractQuestionsJobStatus>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling getExtractionJobStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/claude/extract-questions/{jobId}/status`;
        urlPath = urlPath.replace(`{${"jobId"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtractQuestionsJobStatusFromJSON(jsonValue));
    }

    /**
     * Get extraction job status
     */
    async getExtractionJobStatus(requestParameters: GetExtractionJobStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtractQuestionsJobStatus> {
        const response = await this.getExtractionJobStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload a PDF exam paper, process it to get its structure, and extract questions using Claude AI
     * Process exam paper PDF and extract questions
     */
    async processExamPdfRaw(requestParameters: ProcessExamPdfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtractQuestionsJobResponse>> {
        if (requestParameters['examPackName'] == null) {
            throw new runtime.RequiredError(
                'examPackName',
                'Required parameter "examPackName" was null or undefined when calling processExamPdf().'
            );
        }

        if (requestParameters['pdfFile'] == null) {
            throw new runtime.RequiredError(
                'pdfFile',
                'Required parameter "pdfFile" was null or undefined when calling processExamPdf().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['examPackName'] != null) {
            queryParameters['examPackName'] = requestParameters['examPackName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xAnthropicAPIKey'] != null) {
            headerParameters['X-Anthropic-API-Key'] = String(requestParameters['xAnthropicAPIKey']);
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['pdfFile'] != null) {
            formParams.append('pdfFile', requestParameters['pdfFile'] as any);
        }


        let urlPath = `/api/claude/process-exam-pdf`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtractQuestionsJobResponseFromJSON(jsonValue));
    }

    /**
     * Upload a PDF exam paper, process it to get its structure, and extract questions using Claude AI
     * Process exam paper PDF and extract questions
     */
    async processExamPdf(requestParameters: ProcessExamPdfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtractQuestionsJobResponse> {
        const response = await this.processExamPdfRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send a text prompt to Claude AI and get the response
     * Send prompt to Claude AI
     */
    async sendPromptToClaudeRaw(requestParameters: SendPromptToClaudeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaudeResponse>> {
        if (requestParameters['claudePromptRequest'] == null) {
            throw new runtime.RequiredError(
                'claudePromptRequest',
                'Required parameter "claudePromptRequest" was null or undefined when calling sendPromptToClaude().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xAnthropicAPIKey'] != null) {
            headerParameters['X-Anthropic-API-Key'] = String(requestParameters['xAnthropicAPIKey']);
        }


        let urlPath = `/api/claude/chat`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClaudePromptRequestToJSON(requestParameters['claudePromptRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaudeResponseFromJSON(jsonValue));
    }

    /**
     * Send a text prompt to Claude AI and get the response
     * Send prompt to Claude AI
     */
    async sendPromptToClaude(requestParameters: SendPromptToClaudeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaudeResponse> {
        const response = await this.sendPromptToClaudeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
