/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * This API exposes endpoints to manage entities and items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  MarkAllNotificationsAsRead200Response,
  NotificationResponse,
  PagedNotifications,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    MarkAllNotificationsAsRead200ResponseFromJSON,
    MarkAllNotificationsAsRead200ResponseToJSON,
    NotificationResponseFromJSON,
    NotificationResponseToJSON,
    PagedNotificationsFromJSON,
    PagedNotificationsToJSON,
} from '../models/index';

export interface DismissNotificationRequest {
    id: string;
}

export interface GetUserNotificationsRequest {
    page?: number;
    size?: number;
    status?: string;
    type?: string;
    unreadOnly?: boolean;
}

export interface MarkNotificationAsReadRequest {
    id: string;
}

/**
 * 
 */
export class NotificationsApi extends runtime.BaseAPI {

    /**
     * Dismiss a specific notification for the authenticated user
     * Dismiss notification
     */
    async dismissNotificationRaw(requestParameters: DismissNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling dismissNotification().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/notifications/{id}/dismiss`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationResponseFromJSON(jsonValue));
    }

    /**
     * Dismiss a specific notification for the authenticated user
     * Dismiss notification
     */
    async dismissNotification(requestParameters: DismissNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationResponse> {
        const response = await this.dismissNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a paginated list of notifications for the authenticated user
     * Get user notifications
     */
    async getUserNotificationsRaw(requestParameters: GetUserNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedNotifications>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['unreadOnly'] != null) {
            queryParameters['unreadOnly'] = requestParameters['unreadOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/notifications`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedNotificationsFromJSON(jsonValue));
    }

    /**
     * Retrieve a paginated list of notifications for the authenticated user
     * Get user notifications
     */
    async getUserNotifications(requestParameters: GetUserNotificationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedNotifications> {
        const response = await this.getUserNotificationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mark all notifications as read for the authenticated user
     * Mark all notifications as read
     */
    async markAllNotificationsAsReadRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarkAllNotificationsAsRead200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/notifications/mark-all-read`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MarkAllNotificationsAsRead200ResponseFromJSON(jsonValue));
    }

    /**
     * Mark all notifications as read for the authenticated user
     * Mark all notifications as read
     */
    async markAllNotificationsAsRead(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarkAllNotificationsAsRead200Response> {
        const response = await this.markAllNotificationsAsReadRaw(initOverrides);
        return await response.value();
    }

    /**
     * Mark a specific notification as read for the authenticated user
     * Mark notification as read
     */
    async markNotificationAsReadRaw(requestParameters: MarkNotificationAsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling markNotificationAsRead().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/notifications/{id}/read`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationResponseFromJSON(jsonValue));
    }

    /**
     * Mark a specific notification as read for the authenticated user
     * Mark notification as read
     */
    async markNotificationAsRead(requestParameters: MarkNotificationAsReadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationResponse> {
        const response = await this.markNotificationAsReadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
