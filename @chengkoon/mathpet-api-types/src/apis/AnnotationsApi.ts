/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * This API exposes endpoints to manage entities and items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateAnnotationRequest,
  ErrorResponse,
  QuestionAnnotation,
} from '../models/index';
import {
    CreateAnnotationRequestFromJSON,
    CreateAnnotationRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    QuestionAnnotationFromJSON,
    QuestionAnnotationToJSON,
} from '../models/index';

export interface CreateAnnotationOperationRequest {
    createAnnotationRequest: CreateAnnotationRequest;
}

export interface DeleteAnnotationRequest {
    annotationId: string;
}

/**
 * 
 */
export class AnnotationsApi extends runtime.BaseAPI {

    /**
     * Creates a new text annotation for a question
     * Create a new question annotation
     */
    async createAnnotationRaw(requestParameters: CreateAnnotationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuestionAnnotation>> {
        if (requestParameters['createAnnotationRequest'] == null) {
            throw new runtime.RequiredError(
                'createAnnotationRequest',
                'Required parameter "createAnnotationRequest" was null or undefined when calling createAnnotation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/annotations`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAnnotationRequestToJSON(requestParameters['createAnnotationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuestionAnnotationFromJSON(jsonValue));
    }

    /**
     * Creates a new text annotation for a question
     * Create a new question annotation
     */
    async createAnnotation(requestParameters: CreateAnnotationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuestionAnnotation> {
        const response = await this.createAnnotationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an annotation
     */
    async deleteAnnotationRaw(requestParameters: DeleteAnnotationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['annotationId'] == null) {
            throw new runtime.RequiredError(
                'annotationId',
                'Required parameter "annotationId" was null or undefined when calling deleteAnnotation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/annotations/{annotationId}`;
        urlPath = urlPath.replace(`{${"annotationId"}}`, encodeURIComponent(String(requestParameters['annotationId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an annotation
     */
    async deleteAnnotation(requestParameters: DeleteAnnotationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAnnotationRaw(requestParameters, initOverrides);
    }

}
