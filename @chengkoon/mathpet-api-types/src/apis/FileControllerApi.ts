/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * This API exposes endpoints to manage entities and items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UploadFileRequest,
} from '../models/index';
import {
    UploadFileRequestFromJSON,
    UploadFileRequestToJSON,
} from '../models/index';

export interface CheckFileExistsRequest {
    type: string;
    filename: string;
}

export interface DeleteFileRequest {
    type: string;
    filename: string;
}

export interface ServeFileRequest {
    type: string;
    filename: string;
}

export interface UploadFileOperationRequest {
    type?: string;
    id?: string;
    imageKeyName?: string;
    uploadFileRequest?: UploadFileRequest;
}

/**
 * 
 */
export class FileControllerApi extends runtime.BaseAPI {

    /**
     */
    async checkFileExistsRaw(requestParameters: CheckFileExistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling checkFileExists().'
            );
        }

        if (requestParameters['filename'] == null) {
            throw new runtime.RequiredError(
                'filename',
                'Required parameter "filename" was null or undefined when calling checkFileExists().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/files/images/{type}/{filename}/exists`;
        urlPath = urlPath.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type'])));
        urlPath = urlPath.replace(`{${"filename"}}`, encodeURIComponent(String(requestParameters['filename'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async checkFileExists(requestParameters: CheckFileExistsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.checkFileExistsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteFileRaw(requestParameters: DeleteFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling deleteFile().'
            );
        }

        if (requestParameters['filename'] == null) {
            throw new runtime.RequiredError(
                'filename',
                'Required parameter "filename" was null or undefined when calling deleteFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/files/images/{type}/{filename}`;
        urlPath = urlPath.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type'])));
        urlPath = urlPath.replace(`{${"filename"}}`, encodeURIComponent(String(requestParameters['filename'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async deleteFile(requestParameters: DeleteFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async serveFileRaw(requestParameters: ServeFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling serveFile().'
            );
        }

        if (requestParameters['filename'] == null) {
            throw new runtime.RequiredError(
                'filename',
                'Required parameter "filename" was null or undefined when calling serveFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/files/images/{type}/{filename}`;
        urlPath = urlPath.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type'])));
        urlPath = urlPath.replace(`{${"filename"}}`, encodeURIComponent(String(requestParameters['filename'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async serveFile(requestParameters: ServeFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.serveFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async uploadFileRaw(requestParameters: UploadFileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['imageKeyName'] != null) {
            queryParameters['imageKeyName'] = requestParameters['imageKeyName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/files/upload`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadFileRequestToJSON(requestParameters['uploadFileRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async uploadFile(requestParameters: UploadFileOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.uploadFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
