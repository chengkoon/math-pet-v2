/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * This API exposes endpoints to manage entities and items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Either packId or topicId must be provided, but not both
 * @export
 * @interface StartPracticeSessionRequest
 */
export interface StartPracticeSessionRequest {
    /**
     * Pack ID for pack-based practice sessions
     * @type {string}
     * @memberof StartPracticeSessionRequest
     */
    packId?: string;
    /**
     * Topic ID for topic-based practice sessions
     * @type {number}
     * @memberof StartPracticeSessionRequest
     */
    topicId?: number;
    /**
     * Filter questions by type (only for topic practice)
     * @type {string}
     * @memberof StartPracticeSessionRequest
     */
    questionTypeFilter?: StartPracticeSessionRequestQuestionTypeFilterEnum;
}


/**
 * @export
 */
export const StartPracticeSessionRequestQuestionTypeFilterEnum = {
    Mixed: 'MIXED',
    Mcq: 'MCQ',
    ShortAnswer: 'SHORT_ANSWER',
    ProblemSum: 'PROBLEM_SUM'
} as const;
export type StartPracticeSessionRequestQuestionTypeFilterEnum = typeof StartPracticeSessionRequestQuestionTypeFilterEnum[keyof typeof StartPracticeSessionRequestQuestionTypeFilterEnum];


/**
 * Check if a given object implements the StartPracticeSessionRequest interface.
 */
export function instanceOfStartPracticeSessionRequest(value: object): value is StartPracticeSessionRequest {
    return true;
}

export function StartPracticeSessionRequestFromJSON(json: any): StartPracticeSessionRequest {
    return StartPracticeSessionRequestFromJSONTyped(json, false);
}

export function StartPracticeSessionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): StartPracticeSessionRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'packId': json['packId'] == null ? undefined : json['packId'],
        'topicId': json['topicId'] == null ? undefined : json['topicId'],
        'questionTypeFilter': json['questionTypeFilter'] == null ? undefined : json['questionTypeFilter'],
    };
}

export function StartPracticeSessionRequestToJSON(json: any): StartPracticeSessionRequest {
    return StartPracticeSessionRequestToJSONTyped(json, false);
}

export function StartPracticeSessionRequestToJSONTyped(value?: StartPracticeSessionRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'packId': value['packId'],
        'topicId': value['topicId'],
        'questionTypeFilter': value['questionTypeFilter'],
    };
}

