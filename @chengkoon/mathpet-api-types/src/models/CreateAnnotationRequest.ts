/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * This API exposes endpoints to manage entities and items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateAnnotationRequest
 */
export interface CreateAnnotationRequest {
    /**
     * ID of the question to annotate
     * @type {number}
     * @memberof CreateAnnotationRequest
     */
    questionId: number;
    /**
     * ID of the practice session (optional)
     * @type {string}
     * @memberof CreateAnnotationRequest
     */
    sessionId?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateAnnotationRequest
     */
    annotationType: CreateAnnotationRequestAnnotationTypeEnum;
    /**
     * Character offset where the annotation starts
     * @type {number}
     * @memberof CreateAnnotationRequest
     */
    startOffset: number;
    /**
     * Character offset where the annotation ends
     * @type {number}
     * @memberof CreateAnnotationRequest
     */
    endOffset: number;
    /**
     * The text that was annotated
     * @type {string}
     * @memberof CreateAnnotationRequest
     */
    selectedText: string;
    /**
     * CSS selector for the container element
     * @type {string}
     * @memberof CreateAnnotationRequest
     */
    containerSelector?: string;
}


/**
 * @export
 */
export const CreateAnnotationRequestAnnotationTypeEnum = {
    Highlight: 'HIGHLIGHT',
    Underline: 'UNDERLINE'
} as const;
export type CreateAnnotationRequestAnnotationTypeEnum = typeof CreateAnnotationRequestAnnotationTypeEnum[keyof typeof CreateAnnotationRequestAnnotationTypeEnum];


/**
 * Check if a given object implements the CreateAnnotationRequest interface.
 */
export function instanceOfCreateAnnotationRequest(value: object): value is CreateAnnotationRequest {
    if (!('questionId' in value) || value['questionId'] === undefined) return false;
    if (!('annotationType' in value) || value['annotationType'] === undefined) return false;
    if (!('startOffset' in value) || value['startOffset'] === undefined) return false;
    if (!('endOffset' in value) || value['endOffset'] === undefined) return false;
    if (!('selectedText' in value) || value['selectedText'] === undefined) return false;
    return true;
}

export function CreateAnnotationRequestFromJSON(json: any): CreateAnnotationRequest {
    return CreateAnnotationRequestFromJSONTyped(json, false);
}

export function CreateAnnotationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateAnnotationRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'questionId': json['questionId'],
        'sessionId': json['sessionId'] == null ? undefined : json['sessionId'],
        'annotationType': json['annotationType'],
        'startOffset': json['startOffset'],
        'endOffset': json['endOffset'],
        'selectedText': json['selectedText'],
        'containerSelector': json['containerSelector'] == null ? undefined : json['containerSelector'],
    };
}

export function CreateAnnotationRequestToJSON(json: any): CreateAnnotationRequest {
    return CreateAnnotationRequestToJSONTyped(json, false);
}

export function CreateAnnotationRequestToJSONTyped(value?: CreateAnnotationRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'questionId': value['questionId'],
        'sessionId': value['sessionId'],
        'annotationType': value['annotationType'],
        'startOffset': value['startOffset'],
        'endOffset': value['endOffset'],
        'selectedText': value['selectedText'],
        'containerSelector': value['containerSelector'],
    };
}

