/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * This API exposes endpoints to manage entities and items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Represents a component within a question (e.g., text, image, table)
 * @export
 * @interface QuestionComponent
 */
export interface QuestionComponent {
    /**
     * Identifier for the component
     * @type {number}
     * @memberof QuestionComponent
     */
    id?: number;
    /**
     * Type of the component (e.g., text, image, table)
     * @type {string}
     * @memberof QuestionComponent
     */
    componentType?: string;
    /**
     * Order of the component in the question
     * @type {number}
     * @memberof QuestionComponent
     */
    componentOrder?: number;
    /**
     * Marks allocated for this component (if applicable)
     * @type {number}
     * @memberof QuestionComponent
     */
    marksAllocated?: number;
    /**
     * Text of the component
     * @type {string}
     * @memberof QuestionComponent
     */
    contentText?: string;
    /**
     * URL for the image if this is an image option
     * @type {string}
     * @memberof QuestionComponent
     */
    imageUrl?: string;
    /**
     * Indicates if this option is an image
     * @type {boolean}
     * @memberof QuestionComponent
     */
    isImageOption?: boolean;
}

/**
 * Check if a given object implements the QuestionComponent interface.
 */
export function instanceOfQuestionComponent(value: object): value is QuestionComponent {
    return true;
}

export function QuestionComponentFromJSON(json: any): QuestionComponent {
    return QuestionComponentFromJSONTyped(json, false);
}

export function QuestionComponentFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionComponent {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'componentType': json['componentType'] == null ? undefined : json['componentType'],
        'componentOrder': json['componentOrder'] == null ? undefined : json['componentOrder'],
        'marksAllocated': json['marksAllocated'] == null ? undefined : json['marksAllocated'],
        'contentText': json['contentText'] == null ? undefined : json['contentText'],
        'imageUrl': json['imageUrl'] == null ? undefined : json['imageUrl'],
        'isImageOption': json['isImageOption'] == null ? undefined : json['isImageOption'],
    };
}

export function QuestionComponentToJSON(json: any): QuestionComponent {
    return QuestionComponentToJSONTyped(json, false);
}

export function QuestionComponentToJSONTyped(value?: QuestionComponent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'componentType': value['componentType'],
        'componentOrder': value['componentOrder'],
        'marksAllocated': value['marksAllocated'],
        'contentText': value['contentText'],
        'imageUrl': value['imageUrl'],
        'isImageOption': value['isImageOption'],
    };
}

