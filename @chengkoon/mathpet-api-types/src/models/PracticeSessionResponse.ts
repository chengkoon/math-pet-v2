/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * This API exposes endpoints to manage entities and items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QuestionAttemptResponse } from './QuestionAttemptResponse';
import {
    QuestionAttemptResponseFromJSON,
    QuestionAttemptResponseFromJSONTyped,
    QuestionAttemptResponseToJSON,
    QuestionAttemptResponseToJSONTyped,
} from './QuestionAttemptResponse';
import type { PracticeQuestionResponse } from './PracticeQuestionResponse';
import {
    PracticeQuestionResponseFromJSON,
    PracticeQuestionResponseFromJSONTyped,
    PracticeQuestionResponseToJSON,
    PracticeQuestionResponseToJSONTyped,
} from './PracticeQuestionResponse';

/**
 * 
 * @export
 * @interface PracticeSessionResponse
 */
export interface PracticeSessionResponse {
    /**
     * Session ID
     * @type {string}
     * @memberof PracticeSessionResponse
     */
    id: string;
    /**
     * Pack ID
     * @type {string}
     * @memberof PracticeSessionResponse
     */
    packId?: string;
    /**
     * Title of the pack
     * @type {string}
     * @memberof PracticeSessionResponse
     */
    packTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof PracticeSessionResponse
     */
    status: PracticeSessionResponseStatusEnum;
    /**
     * ID of the current question being answered
     * @type {number}
     * @memberof PracticeSessionResponse
     */
    currentQuestionId: number;
    /**
     * 
     * @type {PracticeQuestionResponse}
     * @memberof PracticeSessionResponse
     */
    currentQuestion: PracticeQuestionResponse;
    /**
     * All questions' attempts in this session (including current question)
     * @type {Array<QuestionAttemptResponse>}
     * @memberof PracticeSessionResponse
     */
    questionAttempts: Array<QuestionAttemptResponse>;
    /**
     * Current question index (0-based)
     * @type {number}
     * @memberof PracticeSessionResponse
     */
    currentQuestionIndex: number;
    /**
     * Total number of questions in the session
     * @type {number}
     * @memberof PracticeSessionResponse
     */
    totalQuestions: number;
    /**
     * Number of questions attempted
     * @type {number}
     * @memberof PracticeSessionResponse
     */
    questionsAttempted: number;
    /**
     * Number of questions answered correctly
     * @type {number}
     * @memberof PracticeSessionResponse
     */
    questionsCorrect: number;
    /**
     * Total time spent in seconds
     * @type {number}
     * @memberof PracticeSessionResponse
     */
    totalTimeSpentSeconds: number;
    /**
     * When the session was started
     * @type {Date}
     * @memberof PracticeSessionResponse
     */
    startedAt: Date;
    /**
     * When the session was last accessed
     * @type {Date}
     * @memberof PracticeSessionResponse
     */
    lastAccessedAt?: Date;
    /**
     * When the session was completed
     * @type {Date}
     * @memberof PracticeSessionResponse
     */
    completedAt?: Date;
    /**
     * Type of the session (e.g., PACK_PRACTICE, TOPIC_PRACTICE)
     * @type {string}
     * @memberof PracticeSessionResponse
     */
    sessionType: string;
    /**
     * Sub-type of the session (e.g., MIXED, MCQ, SHORT_ANSWER)
     * @type {string}
     * @memberof PracticeSessionResponse
     */
    sessionSubType: string;
}


/**
 * @export
 */
export const PracticeSessionResponseStatusEnum = {
    InProgress: 'IN_PROGRESS',
    Completed: 'COMPLETED',
    Abandoned: 'ABANDONED'
} as const;
export type PracticeSessionResponseStatusEnum = typeof PracticeSessionResponseStatusEnum[keyof typeof PracticeSessionResponseStatusEnum];


/**
 * Check if a given object implements the PracticeSessionResponse interface.
 */
export function instanceOfPracticeSessionResponse(value: object): value is PracticeSessionResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('currentQuestionId' in value) || value['currentQuestionId'] === undefined) return false;
    if (!('currentQuestion' in value) || value['currentQuestion'] === undefined) return false;
    if (!('questionAttempts' in value) || value['questionAttempts'] === undefined) return false;
    if (!('currentQuestionIndex' in value) || value['currentQuestionIndex'] === undefined) return false;
    if (!('totalQuestions' in value) || value['totalQuestions'] === undefined) return false;
    if (!('questionsAttempted' in value) || value['questionsAttempted'] === undefined) return false;
    if (!('questionsCorrect' in value) || value['questionsCorrect'] === undefined) return false;
    if (!('totalTimeSpentSeconds' in value) || value['totalTimeSpentSeconds'] === undefined) return false;
    if (!('startedAt' in value) || value['startedAt'] === undefined) return false;
    if (!('sessionType' in value) || value['sessionType'] === undefined) return false;
    if (!('sessionSubType' in value) || value['sessionSubType'] === undefined) return false;
    return true;
}

export function PracticeSessionResponseFromJSON(json: any): PracticeSessionResponse {
    return PracticeSessionResponseFromJSONTyped(json, false);
}

export function PracticeSessionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PracticeSessionResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'packId': json['packId'] == null ? undefined : json['packId'],
        'packTitle': json['packTitle'] == null ? undefined : json['packTitle'],
        'status': json['status'],
        'currentQuestionId': json['currentQuestionId'],
        'currentQuestion': PracticeQuestionResponseFromJSON(json['currentQuestion']),
        'questionAttempts': ((json['questionAttempts'] as Array<any>).map(QuestionAttemptResponseFromJSON)),
        'currentQuestionIndex': json['currentQuestionIndex'],
        'totalQuestions': json['totalQuestions'],
        'questionsAttempted': json['questionsAttempted'],
        'questionsCorrect': json['questionsCorrect'],
        'totalTimeSpentSeconds': json['totalTimeSpentSeconds'],
        'startedAt': (new Date(json['startedAt'])),
        'lastAccessedAt': json['lastAccessedAt'] == null ? undefined : (new Date(json['lastAccessedAt'])),
        'completedAt': json['completedAt'] == null ? undefined : (new Date(json['completedAt'])),
        'sessionType': json['sessionType'],
        'sessionSubType': json['sessionSubType'],
    };
}

export function PracticeSessionResponseToJSON(json: any): PracticeSessionResponse {
    return PracticeSessionResponseToJSONTyped(json, false);
}

export function PracticeSessionResponseToJSONTyped(value?: PracticeSessionResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'packId': value['packId'],
        'packTitle': value['packTitle'],
        'status': value['status'],
        'currentQuestionId': value['currentQuestionId'],
        'currentQuestion': PracticeQuestionResponseToJSON(value['currentQuestion']),
        'questionAttempts': ((value['questionAttempts'] as Array<any>).map(QuestionAttemptResponseToJSON)),
        'currentQuestionIndex': value['currentQuestionIndex'],
        'totalQuestions': value['totalQuestions'],
        'questionsAttempted': value['questionsAttempted'],
        'questionsCorrect': value['questionsCorrect'],
        'totalTimeSpentSeconds': value['totalTimeSpentSeconds'],
        'startedAt': ((value['startedAt']).toISOString()),
        'lastAccessedAt': value['lastAccessedAt'] == null ? undefined : ((value['lastAccessedAt']).toISOString()),
        'completedAt': value['completedAt'] == null ? undefined : ((value['completedAt']).toISOString()),
        'sessionType': value['sessionType'],
        'sessionSubType': value['sessionSubType'],
    };
}

