/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * This API exposes endpoints to manage entities and items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * Unique identifier for the user
     * @type {string}
     * @memberof UserResponse
     */
    userId?: string;
    /**
     * User's username
     * @type {string}
     * @memberof UserResponse
     */
    username?: string;
    /**
     * User's email address
     * @type {string}
     * @memberof UserResponse
     */
    email?: string;
    /**
     * User's first name
     * @type {string}
     * @memberof UserResponse
     */
    firstName?: string;
    /**
     * User's last name
     * @type {string}
     * @memberof UserResponse
     */
    lastName?: string;
    /**
     * User's role in the system (e.g., STUDENT, TEACHER, ADMIN)
     * @type {string}
     * @memberof UserResponse
     */
    role?: string;
    /**
     * User's educational level ID (if applicable)
     * @type {number}
     * @memberof UserResponse
     */
    levelId?: number;
    /**
     * Success or error message
     * @type {string}
     * @memberof UserResponse
     */
    message?: string;
    /**
     * JWT authentication token
     * @type {string}
     * @memberof UserResponse
     */
    token?: string;
}

/**
 * Check if a given object implements the UserResponse interface.
 */
export function instanceOfUserResponse(value: object): value is UserResponse {
    return true;
}

export function UserResponseFromJSON(json: any): UserResponse {
    return UserResponseFromJSONTyped(json, false);
}

export function UserResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'userId': json['userId'] == null ? undefined : json['userId'],
        'username': json['username'] == null ? undefined : json['username'],
        'email': json['email'] == null ? undefined : json['email'],
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'role': json['role'] == null ? undefined : json['role'],
        'levelId': json['levelId'] == null ? undefined : json['levelId'],
        'message': json['message'] == null ? undefined : json['message'],
        'token': json['token'] == null ? undefined : json['token'],
    };
}

export function UserResponseToJSON(json: any): UserResponse {
    return UserResponseToJSONTyped(json, false);
}

export function UserResponseToJSONTyped(value?: UserResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'userId': value['userId'],
        'username': value['username'],
        'email': value['email'],
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'role': value['role'],
        'levelId': value['levelId'],
        'message': value['message'],
        'token': value['token'],
    };
}

