/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * This API exposes endpoints to manage entities and items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExtractQuestionsJobStatusProgress } from './ExtractQuestionsJobStatusProgress';
import {
    ExtractQuestionsJobStatusProgressFromJSON,
    ExtractQuestionsJobStatusProgressFromJSONTyped,
    ExtractQuestionsJobStatusProgressToJSON,
    ExtractQuestionsJobStatusProgressToJSONTyped,
} from './ExtractQuestionsJobStatusProgress';
import type { ExtractQuestionsJobStatusResult } from './ExtractQuestionsJobStatusResult';
import {
    ExtractQuestionsJobStatusResultFromJSON,
    ExtractQuestionsJobStatusResultFromJSONTyped,
    ExtractQuestionsJobStatusResultToJSON,
    ExtractQuestionsJobStatusResultToJSONTyped,
} from './ExtractQuestionsJobStatusResult';
import type { ExtractQuestionsJobStatusError } from './ExtractQuestionsJobStatusError';
import {
    ExtractQuestionsJobStatusErrorFromJSON,
    ExtractQuestionsJobStatusErrorFromJSONTyped,
    ExtractQuestionsJobStatusErrorToJSON,
    ExtractQuestionsJobStatusErrorToJSONTyped,
} from './ExtractQuestionsJobStatusError';

/**
 * 
 * @export
 * @interface ExtractQuestionsJobStatus
 */
export interface ExtractQuestionsJobStatus {
    /**
     * 
     * @type {string}
     * @memberof ExtractQuestionsJobStatus
     */
    jobId: string;
    /**
     * 
     * @type {string}
     * @memberof ExtractQuestionsJobStatus
     */
    status: ExtractQuestionsJobStatusStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ExtractQuestionsJobStatus
     */
    examPackName: string;
    /**
     * 
     * @type {Date}
     * @memberof ExtractQuestionsJobStatus
     */
    submittedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ExtractQuestionsJobStatus
     */
    startedAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ExtractQuestionsJobStatus
     */
    completedAt?: Date;
    /**
     * 
     * @type {ExtractQuestionsJobStatusProgress}
     * @memberof ExtractQuestionsJobStatus
     */
    progress?: ExtractQuestionsJobStatusProgress;
    /**
     * 
     * @type {ExtractQuestionsJobStatusResult}
     * @memberof ExtractQuestionsJobStatus
     */
    result?: ExtractQuestionsJobStatusResult;
    /**
     * 
     * @type {ExtractQuestionsJobStatusError}
     * @memberof ExtractQuestionsJobStatus
     */
    error?: ExtractQuestionsJobStatusError;
}


/**
 * @export
 */
export const ExtractQuestionsJobStatusStatusEnum = {
    Pending: 'PENDING',
    Processing: 'PROCESSING',
    Completed: 'COMPLETED',
    Failed: 'FAILED'
} as const;
export type ExtractQuestionsJobStatusStatusEnum = typeof ExtractQuestionsJobStatusStatusEnum[keyof typeof ExtractQuestionsJobStatusStatusEnum];


/**
 * Check if a given object implements the ExtractQuestionsJobStatus interface.
 */
export function instanceOfExtractQuestionsJobStatus(value: object): value is ExtractQuestionsJobStatus {
    if (!('jobId' in value) || value['jobId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('examPackName' in value) || value['examPackName'] === undefined) return false;
    if (!('submittedAt' in value) || value['submittedAt'] === undefined) return false;
    return true;
}

export function ExtractQuestionsJobStatusFromJSON(json: any): ExtractQuestionsJobStatus {
    return ExtractQuestionsJobStatusFromJSONTyped(json, false);
}

export function ExtractQuestionsJobStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExtractQuestionsJobStatus {
    if (json == null) {
        return json;
    }
    return {
        
        'jobId': json['jobId'],
        'status': json['status'],
        'examPackName': json['examPackName'],
        'submittedAt': (new Date(json['submittedAt'])),
        'startedAt': json['startedAt'] == null ? undefined : (new Date(json['startedAt'])),
        'completedAt': json['completedAt'] == null ? undefined : (new Date(json['completedAt'])),
        'progress': json['progress'] == null ? undefined : ExtractQuestionsJobStatusProgressFromJSON(json['progress']),
        'result': json['result'] == null ? undefined : ExtractQuestionsJobStatusResultFromJSON(json['result']),
        'error': json['error'] == null ? undefined : ExtractQuestionsJobStatusErrorFromJSON(json['error']),
    };
}

export function ExtractQuestionsJobStatusToJSON(json: any): ExtractQuestionsJobStatus {
    return ExtractQuestionsJobStatusToJSONTyped(json, false);
}

export function ExtractQuestionsJobStatusToJSONTyped(value?: ExtractQuestionsJobStatus | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'jobId': value['jobId'],
        'status': value['status'],
        'examPackName': value['examPackName'],
        'submittedAt': ((value['submittedAt']).toISOString()),
        'startedAt': value['startedAt'] == null ? undefined : ((value['startedAt']).toISOString()),
        'completedAt': value['completedAt'] == null ? undefined : ((value['completedAt']).toISOString()),
        'progress': ExtractQuestionsJobStatusProgressToJSON(value['progress']),
        'result': ExtractQuestionsJobStatusResultToJSON(value['result']),
        'error': ExtractQuestionsJobStatusErrorToJSON(value['error']),
    };
}

