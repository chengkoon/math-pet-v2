/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * This API exposes endpoints to manage entities and items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * User's annotations for this question
 * @export
 * @interface QuestionAnnotation
 */
export interface QuestionAnnotation {
    /**
     * Unique identifier for the annotation
     * @type {number}
     * @memberof QuestionAnnotation
     */
    id: number;
    /**
     * ID of the question this annotation belongs to
     * @type {number}
     * @memberof QuestionAnnotation
     */
    questionId: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionAnnotation
     */
    annotationType: QuestionAnnotationAnnotationTypeEnum;
    /**
     * Character offset where the annotation starts
     * @type {number}
     * @memberof QuestionAnnotation
     */
    startOffset: number;
    /**
     * Character offset where the annotation ends
     * @type {number}
     * @memberof QuestionAnnotation
     */
    endOffset: number;
    /**
     * The text that was annotated
     * @type {string}
     * @memberof QuestionAnnotation
     */
    selectedText: string;
    /**
     * CSS selector for the container element
     * @type {string}
     * @memberof QuestionAnnotation
     */
    containerSelector: string;
    /**
     * When the annotation was created
     * @type {Date}
     * @memberof QuestionAnnotation
     */
    createdAt: Date;
    /**
     * When the annotation was last updated
     * @type {Date}
     * @memberof QuestionAnnotation
     */
    updatedAt?: Date;
}


/**
 * @export
 */
export const QuestionAnnotationAnnotationTypeEnum = {
    Highlight: 'HIGHLIGHT',
    Underline: 'UNDERLINE'
} as const;
export type QuestionAnnotationAnnotationTypeEnum = typeof QuestionAnnotationAnnotationTypeEnum[keyof typeof QuestionAnnotationAnnotationTypeEnum];


/**
 * Check if a given object implements the QuestionAnnotation interface.
 */
export function instanceOfQuestionAnnotation(value: object): value is QuestionAnnotation {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('questionId' in value) || value['questionId'] === undefined) return false;
    if (!('annotationType' in value) || value['annotationType'] === undefined) return false;
    if (!('startOffset' in value) || value['startOffset'] === undefined) return false;
    if (!('endOffset' in value) || value['endOffset'] === undefined) return false;
    if (!('selectedText' in value) || value['selectedText'] === undefined) return false;
    if (!('containerSelector' in value) || value['containerSelector'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function QuestionAnnotationFromJSON(json: any): QuestionAnnotation {
    return QuestionAnnotationFromJSONTyped(json, false);
}

export function QuestionAnnotationFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionAnnotation {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'questionId': json['questionId'],
        'annotationType': json['annotationType'],
        'startOffset': json['startOffset'],
        'endOffset': json['endOffset'],
        'selectedText': json['selectedText'],
        'containerSelector': json['containerSelector'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
    };
}

export function QuestionAnnotationToJSON(json: any): QuestionAnnotation {
    return QuestionAnnotationToJSONTyped(json, false);
}

export function QuestionAnnotationToJSONTyped(value?: QuestionAnnotation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'questionId': value['questionId'],
        'annotationType': value['annotationType'],
        'startOffset': value['startOffset'],
        'endOffset': value['endOffset'],
        'selectedText': value['selectedText'],
        'containerSelector': value['containerSelector'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
    };
}

