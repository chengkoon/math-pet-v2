/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * This API exposes endpoints to manage entities and items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * List of notifications
 * @export
 * @interface NotificationResponse
 */
export interface NotificationResponse {
    /**
     * Unique identifier for the notification
     * @type {string}
     * @memberof NotificationResponse
     */
    readonly id: string;
    /**
     * ID of the event that triggered this notification
     * @type {string}
     * @memberof NotificationResponse
     */
    eventId: string;
    /**
     * Type of notification (e.g., "HOMEWORK_ASSIGNED", "QUESTION_COMMENTED")
     * @type {string}
     * @memberof NotificationResponse
     */
    type: string;
    /**
     * Notification message (e.g., "John assigned homework Math Exercise 1 to you")
     * @type {string}
     * @memberof NotificationResponse
     */
    message: string;
    /**
     * Icon identifier for UI display
     * @type {string}
     * @memberof NotificationResponse
     */
    icon?: string;
    /**
     * Current status of the notification
     * @type {string}
     * @memberof NotificationResponse
     */
    status: NotificationResponseStatusEnum;
    /**
     * When the notification was created
     * @type {Date}
     * @memberof NotificationResponse
     */
    readonly createdAt: Date;
    /**
     * When the notification was sent to the user
     * @type {Date}
     * @memberof NotificationResponse
     */
    readonly sentAt?: Date;
    /**
     * When the user read the notification
     * @type {Date}
     * @memberof NotificationResponse
     */
    readonly readAt?: Date;
    /**
     * When the user dismissed the notification
     * @type {Date}
     * @memberof NotificationResponse
     */
    readonly dismissedAt?: Date;
    /**
     * Additional metadata for the notification
     * @type {{ [key: string]: object; }}
     * @memberof NotificationResponse
     */
    metadata?: { [key: string]: object; };
}


/**
 * @export
 */
export const NotificationResponseStatusEnum = {
    Pending: 'pending',
    Sent: 'sent',
    Read: 'read',
    Dismissed: 'dismissed'
} as const;
export type NotificationResponseStatusEnum = typeof NotificationResponseStatusEnum[keyof typeof NotificationResponseStatusEnum];


/**
 * Check if a given object implements the NotificationResponse interface.
 */
export function instanceOfNotificationResponse(value: object): value is NotificationResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('eventId' in value) || value['eventId'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function NotificationResponseFromJSON(json: any): NotificationResponse {
    return NotificationResponseFromJSONTyped(json, false);
}

export function NotificationResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): NotificationResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'eventId': json['eventId'],
        'type': json['type'],
        'message': json['message'],
        'icon': json['icon'] == null ? undefined : json['icon'],
        'status': json['status'],
        'createdAt': (new Date(json['createdAt'])),
        'sentAt': json['sentAt'] == null ? undefined : (new Date(json['sentAt'])),
        'readAt': json['readAt'] == null ? undefined : (new Date(json['readAt'])),
        'dismissedAt': json['dismissedAt'] == null ? undefined : (new Date(json['dismissedAt'])),
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
    };
}

export function NotificationResponseToJSON(json: any): NotificationResponse {
    return NotificationResponseToJSONTyped(json, false);
}

export function NotificationResponseToJSONTyped(value?: Omit<NotificationResponse, 'id'|'createdAt'|'sentAt'|'readAt'|'dismissedAt'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'eventId': value['eventId'],
        'type': value['type'],
        'message': value['message'],
        'icon': value['icon'],
        'status': value['status'],
        'metadata': value['metadata'],
    };
}

