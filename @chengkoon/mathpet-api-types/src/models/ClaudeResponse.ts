/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * This API exposes endpoints to manage entities and items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ClaudeResponse
 */
export interface ClaudeResponse {
    /**
     * Whether the request was successful
     * @type {boolean}
     * @memberof ClaudeResponse
     */
    success: boolean;
    /**
     * Claude's response text (present when success is true)
     * @type {string}
     * @memberof ClaudeResponse
     */
    response?: string;
    /**
     * The Claude model used (present when success is true)
     * @type {string}
     * @memberof ClaudeResponse
     */
    model?: string;
    /**
     * Error message (present when success is false)
     * @type {string}
     * @memberof ClaudeResponse
     */
    error?: string;
    /**
     * Additional error context (present when success is false)
     * @type {string}
     * @memberof ClaudeResponse
     */
    message?: string;
    /**
     * When the request was processed
     * @type {Date}
     * @memberof ClaudeResponse
     */
    timestamp: Date;
}

/**
 * Check if a given object implements the ClaudeResponse interface.
 */
export function instanceOfClaudeResponse(value: object): value is ClaudeResponse {
    if (!('success' in value) || value['success'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function ClaudeResponseFromJSON(json: any): ClaudeResponse {
    return ClaudeResponseFromJSONTyped(json, false);
}

export function ClaudeResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClaudeResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'success': json['success'],
        'response': json['response'] == null ? undefined : json['response'],
        'model': json['model'] == null ? undefined : json['model'],
        'error': json['error'] == null ? undefined : json['error'],
        'message': json['message'] == null ? undefined : json['message'],
        'timestamp': (new Date(json['timestamp'])),
    };
}

export function ClaudeResponseToJSON(json: any): ClaudeResponse {
    return ClaudeResponseToJSONTyped(json, false);
}

export function ClaudeResponseToJSONTyped(value?: ClaudeResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'success': value['success'],
        'response': value['response'],
        'model': value['model'],
        'error': value['error'],
        'message': value['message'],
        'timestamp': ((value['timestamp']).toISOString()),
    };
}

