/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * This API exposes endpoints to manage entities and items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TopicResponse
 */
export interface TopicResponse {
    /**
     * Topic ID
     * @type {number}
     * @memberof TopicResponse
     */
    id: number;
    /**
     * Subject ID
     * @type {number}
     * @memberof TopicResponse
     */
    subjectId?: number;
    /**
     * Parent topic ID
     * @type {number}
     * @memberof TopicResponse
     */
    parentId?: number;
    /**
     * Hierarchical path
     * @type {string}
     * @memberof TopicResponse
     */
    path: string;
    /**
     * Depth level in hierarchy
     * @type {number}
     * @memberof TopicResponse
     */
    depth: number;
    /**
     * Type of depth level
     * @type {string}
     * @memberof TopicResponse
     */
    depthType?: string;
    /**
     * Topic code
     * @type {string}
     * @memberof TopicResponse
     */
    code?: string;
    /**
     * Topic title
     * @type {string}
     * @memberof TopicResponse
     */
    title: string;
    /**
     * Topic description
     * @type {string}
     * @memberof TopicResponse
     */
    description?: string;
    /**
     * Educational level ID
     * @type {number}
     * @memberof TopicResponse
     */
    levelId?: number;
    /**
     * Sort order for display
     * @type {number}
     * @memberof TopicResponse
     */
    sortOrder: number;
    /**
     * Creation timestamp
     * @type {Date}
     * @memberof TopicResponse
     */
    createdAt: Date;
    /**
     * Last update timestamp
     * @type {Date}
     * @memberof TopicResponse
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the TopicResponse interface.
 */
export function instanceOfTopicResponse(value: object): value is TopicResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('path' in value) || value['path'] === undefined) return false;
    if (!('depth' in value) || value['depth'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('sortOrder' in value) || value['sortOrder'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function TopicResponseFromJSON(json: any): TopicResponse {
    return TopicResponseFromJSONTyped(json, false);
}

export function TopicResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TopicResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'subjectId': json['subjectId'] == null ? undefined : json['subjectId'],
        'parentId': json['parentId'] == null ? undefined : json['parentId'],
        'path': json['path'],
        'depth': json['depth'],
        'depthType': json['depthType'] == null ? undefined : json['depthType'],
        'code': json['code'] == null ? undefined : json['code'],
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'levelId': json['levelId'] == null ? undefined : json['levelId'],
        'sortOrder': json['sortOrder'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function TopicResponseToJSON(json: any): TopicResponse {
    return TopicResponseToJSONTyped(json, false);
}

export function TopicResponseToJSONTyped(value?: TopicResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'subjectId': value['subjectId'],
        'parentId': value['parentId'],
        'path': value['path'],
        'depth': value['depth'],
        'depthType': value['depthType'],
        'code': value['code'],
        'title': value['title'],
        'description': value['description'],
        'levelId': value['levelId'],
        'sortOrder': value['sortOrder'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

