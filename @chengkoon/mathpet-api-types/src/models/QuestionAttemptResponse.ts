/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * This API exposes endpoints to manage entities and items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Attempts for this question (including current attempt)
 * @export
 * @interface QuestionAttemptResponse
 */
export interface QuestionAttemptResponse {
    /**
     * Attempt ID
     * @type {number}
     * @memberof QuestionAttemptResponse
     */
    id: number;
    /**
     * Question ID
     * @type {number}
     * @memberof QuestionAttemptResponse
     */
    questionId: number;
    /**
     * Question index in the session
     * @type {number}
     * @memberof QuestionAttemptResponse
     */
    questionIndex: number;
    /**
     * Question index of the parent question in the session (for grouping UI)
     * @type {number}
     * @memberof QuestionAttemptResponse
     */
    parentQuestionPosition?: number;
    /**
     * Student's answer
     * @type {string}
     * @memberof QuestionAttemptResponse
     */
    studentAnswer?: string;
    /**
     * Selected option ID (for MCQ)
     * @type {number}
     * @memberof QuestionAttemptResponse
     */
    selectedOptionId?: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionAttemptResponse
     */
    status: QuestionAttemptResponseStatusEnum;
    /**
     * Whether the answer is correct
     * @type {boolean}
     * @memberof QuestionAttemptResponse
     */
    isCorrect?: boolean;
    /**
     * Time spent on this question
     * @type {number}
     * @memberof QuestionAttemptResponse
     */
    timeSpentSeconds?: number;
    /**
     * Attempt number for this question
     * @type {number}
     * @memberof QuestionAttemptResponse
     */
    attemptNumber?: number;
    /**
     * When the attempt was made
     * @type {Date}
     * @memberof QuestionAttemptResponse
     */
    attemptedAt?: Date;
}


/**
 * @export
 */
export const QuestionAttemptResponseStatusEnum = {
    Entered: 'ENTERED',
    Answered: 'ANSWERED',
    Skipped: 'SKIPPED',
    SeenOnly: 'SEEN_ONLY'
} as const;
export type QuestionAttemptResponseStatusEnum = typeof QuestionAttemptResponseStatusEnum[keyof typeof QuestionAttemptResponseStatusEnum];


/**
 * Check if a given object implements the QuestionAttemptResponse interface.
 */
export function instanceOfQuestionAttemptResponse(value: object): value is QuestionAttemptResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('questionId' in value) || value['questionId'] === undefined) return false;
    if (!('questionIndex' in value) || value['questionIndex'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function QuestionAttemptResponseFromJSON(json: any): QuestionAttemptResponse {
    return QuestionAttemptResponseFromJSONTyped(json, false);
}

export function QuestionAttemptResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionAttemptResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'questionId': json['questionId'],
        'questionIndex': json['questionIndex'],
        'parentQuestionPosition': json['parentQuestionPosition'] == null ? undefined : json['parentQuestionPosition'],
        'studentAnswer': json['studentAnswer'] == null ? undefined : json['studentAnswer'],
        'selectedOptionId': json['selectedOptionId'] == null ? undefined : json['selectedOptionId'],
        'status': json['status'],
        'isCorrect': json['isCorrect'] == null ? undefined : json['isCorrect'],
        'timeSpentSeconds': json['timeSpentSeconds'] == null ? undefined : json['timeSpentSeconds'],
        'attemptNumber': json['attemptNumber'] == null ? undefined : json['attemptNumber'],
        'attemptedAt': json['attemptedAt'] == null ? undefined : (new Date(json['attemptedAt'])),
    };
}

export function QuestionAttemptResponseToJSON(json: any): QuestionAttemptResponse {
    return QuestionAttemptResponseToJSONTyped(json, false);
}

export function QuestionAttemptResponseToJSONTyped(value?: QuestionAttemptResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'questionId': value['questionId'],
        'questionIndex': value['questionIndex'],
        'parentQuestionPosition': value['parentQuestionPosition'],
        'studentAnswer': value['studentAnswer'],
        'selectedOptionId': value['selectedOptionId'],
        'status': value['status'],
        'isCorrect': value['isCorrect'],
        'timeSpentSeconds': value['timeSpentSeconds'],
        'attemptNumber': value['attemptNumber'],
        'attemptedAt': value['attemptedAt'] == null ? undefined : ((value['attemptedAt']).toISOString()),
    };
}

