/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * This API exposes endpoints to manage entities and items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface QuestionResponse
 */
export interface QuestionResponse {
    /**
     * Unique identifier for the question
     * @type {number}
     * @memberof QuestionResponse
     */
    readonly id?: number;
    /**
     * ID of the question type (MCQ, Short Answer, Problem Sum)
     * @type {number}
     * @memberof QuestionResponse
     */
    questionTypeId: number;
    /**
     * ID of the subject
     * @type {number}
     * @memberof QuestionResponse
     */
    subjectId: number;
    /**
     * ID of the educational level
     * @type {number}
     * @memberof QuestionResponse
     */
    levelId: number;
    /**
     * Array of curriculum topic IDs associated with this question
     * @type {Array<number>}
     * @memberof QuestionResponse
     */
    curriculumTopicIds?: Array<number>;
    /**
     * The text of the question
     * @type {string}
     * @memberof QuestionResponse
     */
    questionText: string;
    /**
     * Number of marks assigned to the question (supports half marks)
     * @type {number}
     * @memberof QuestionResponse
     */
    marks: number;
    /**
     * Number of marks assigned for showing working (for problem sums, supports half marks)
     * @type {number}
     * @memberof QuestionResponse
     */
    workingMarks?: number;
    /**
     * ID of the user who created the question
     * @type {string}
     * @memberof QuestionResponse
     */
    createdBy?: string;
    /**
     * Indicates if the question is publicly available
     * @type {boolean}
     * @memberof QuestionResponse
     */
    isPublic?: boolean;
    /**
     * Date and time when the question was created
     * @type {Date}
     * @memberof QuestionResponse
     */
    createdAt?: Date;
    /**
     * Date and time when the question was last updated
     * @type {Date}
     * @memberof QuestionResponse
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the QuestionResponse interface.
 */
export function instanceOfQuestionResponse(value: object): value is QuestionResponse {
    if (!('questionTypeId' in value) || value['questionTypeId'] === undefined) return false;
    if (!('subjectId' in value) || value['subjectId'] === undefined) return false;
    if (!('levelId' in value) || value['levelId'] === undefined) return false;
    if (!('questionText' in value) || value['questionText'] === undefined) return false;
    if (!('marks' in value) || value['marks'] === undefined) return false;
    return true;
}

export function QuestionResponseFromJSON(json: any): QuestionResponse {
    return QuestionResponseFromJSONTyped(json, false);
}

export function QuestionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuestionResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'questionTypeId': json['questionTypeId'],
        'subjectId': json['subjectId'],
        'levelId': json['levelId'],
        'curriculumTopicIds': json['curriculumTopicIds'] == null ? undefined : json['curriculumTopicIds'],
        'questionText': json['questionText'],
        'marks': json['marks'],
        'workingMarks': json['workingMarks'] == null ? undefined : json['workingMarks'],
        'createdBy': json['createdBy'] == null ? undefined : json['createdBy'],
        'isPublic': json['isPublic'] == null ? undefined : json['isPublic'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
    };
}

export function QuestionResponseToJSON(json: any): QuestionResponse {
    return QuestionResponseToJSONTyped(json, false);
}

export function QuestionResponseToJSONTyped(value?: Omit<QuestionResponse, 'id'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'questionTypeId': value['questionTypeId'],
        'subjectId': value['subjectId'],
        'levelId': value['levelId'],
        'curriculumTopicIds': value['curriculumTopicIds'],
        'questionText': value['questionText'],
        'marks': value['marks'],
        'workingMarks': value['workingMarks'],
        'createdBy': value['createdBy'],
        'isPublic': value['isPublic'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
    };
}

