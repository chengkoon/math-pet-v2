/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * This API exposes endpoints to manage entities and items.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QuestionAttemptResponse } from './QuestionAttemptResponse';
import {
    QuestionAttemptResponseFromJSON,
    QuestionAttemptResponseFromJSONTyped,
    QuestionAttemptResponseToJSON,
    QuestionAttemptResponseToJSONTyped,
} from './QuestionAttemptResponse';
import type { QuestionComponent } from './QuestionComponent';
import {
    QuestionComponentFromJSON,
    QuestionComponentFromJSONTyped,
    QuestionComponentToJSON,
    QuestionComponentToJSONTyped,
} from './QuestionComponent';
import type { QuestionAnnotation } from './QuestionAnnotation';
import {
    QuestionAnnotationFromJSON,
    QuestionAnnotationFromJSONTyped,
    QuestionAnnotationToJSON,
    QuestionAnnotationToJSONTyped,
} from './QuestionAnnotation';
import type { QuestionResponse } from './QuestionResponse';
import {
    QuestionResponseFromJSON,
    QuestionResponseFromJSONTyped,
    QuestionResponseToJSON,
    QuestionResponseToJSONTyped,
} from './QuestionResponse';

/**
 * 
 * @export
 * @interface PracticeQuestionResponse
 */
export interface PracticeQuestionResponse {
    /**
     * Index of this question in the practice session (0-based)
     * @type {number}
     * @memberof PracticeQuestionResponse
     */
    questionIndex?: number;
    /**
     * 
     * @type {QuestionResponse}
     * @memberof PracticeQuestionResponse
     */
    question?: QuestionResponse;
    /**
     * Components for this question (e.g., images, tables, grids, etc)
     * @type {Array<QuestionComponent>}
     * @memberof PracticeQuestionResponse
     */
    components?: Array<QuestionComponent>;
    /**
     * User's annotations for this question
     * @type {Array<QuestionAnnotation>}
     * @memberof PracticeQuestionResponse
     */
    annotations?: Array<QuestionAnnotation>;
    /**
     * Attempts for this question (including current attempt)
     * @type {Array<QuestionAttemptResponse>}
     * @memberof PracticeQuestionResponse
     */
    attempts?: Array<QuestionAttemptResponse>;
    /**
     * Array of sub-questions if this is a parent question
     * @type {Array<PracticeQuestionResponse>}
     * @memberof PracticeQuestionResponse
     */
    subQuestions?: Array<PracticeQuestionResponse>;
    /**
     * Whether this question has sub-questions
     * @type {boolean}
     * @memberof PracticeQuestionResponse
     */
    isParentQuestion?: boolean;
    /**
     * Display identifier like "a)", "b)", "i)", etc. (for sub-questions only)
     * @type {string}
     * @memberof PracticeQuestionResponse
     */
    subQuestionIdentifier?: string;
    /**
     * Position of the parent question in the session (for grouping UI)
     * @type {number}
     * @memberof PracticeQuestionResponse
     */
    parentQuestionPosition?: number;
    /**
     * Whether this question has been answered
     * @type {boolean}
     * @memberof PracticeQuestionResponse
     */
    isAnswered?: boolean;
    /**
     * Time spent on this question so far
     * @type {number}
     * @memberof PracticeQuestionResponse
     */
    timeSpentSeconds?: number;
}

/**
 * Check if a given object implements the PracticeQuestionResponse interface.
 */
export function instanceOfPracticeQuestionResponse(value: object): value is PracticeQuestionResponse {
    return true;
}

export function PracticeQuestionResponseFromJSON(json: any): PracticeQuestionResponse {
    return PracticeQuestionResponseFromJSONTyped(json, false);
}

export function PracticeQuestionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PracticeQuestionResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'questionIndex': json['questionIndex'] == null ? undefined : json['questionIndex'],
        'question': json['question'] == null ? undefined : QuestionResponseFromJSON(json['question']),
        'components': json['components'] == null ? undefined : ((json['components'] as Array<any>).map(QuestionComponentFromJSON)),
        'annotations': json['annotations'] == null ? undefined : ((json['annotations'] as Array<any>).map(QuestionAnnotationFromJSON)),
        'attempts': json['attempts'] == null ? undefined : ((json['attempts'] as Array<any>).map(QuestionAttemptResponseFromJSON)),
        'subQuestions': json['subQuestions'] == null ? undefined : ((json['subQuestions'] as Array<any>).map(PracticeQuestionResponseFromJSON)),
        'isParentQuestion': json['isParentQuestion'] == null ? undefined : json['isParentQuestion'],
        'subQuestionIdentifier': json['subQuestionIdentifier'] == null ? undefined : json['subQuestionIdentifier'],
        'parentQuestionPosition': json['parentQuestionPosition'] == null ? undefined : json['parentQuestionPosition'],
        'isAnswered': json['isAnswered'] == null ? undefined : json['isAnswered'],
        'timeSpentSeconds': json['timeSpentSeconds'] == null ? undefined : json['timeSpentSeconds'],
    };
}

export function PracticeQuestionResponseToJSON(json: any): PracticeQuestionResponse {
    return PracticeQuestionResponseToJSONTyped(json, false);
}

export function PracticeQuestionResponseToJSONTyped(value?: PracticeQuestionResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'questionIndex': value['questionIndex'],
        'question': QuestionResponseToJSON(value['question']),
        'components': value['components'] == null ? undefined : ((value['components'] as Array<any>).map(QuestionComponentToJSON)),
        'annotations': value['annotations'] == null ? undefined : ((value['annotations'] as Array<any>).map(QuestionAnnotationToJSON)),
        'attempts': value['attempts'] == null ? undefined : ((value['attempts'] as Array<any>).map(QuestionAttemptResponseToJSON)),
        'subQuestions': value['subQuestions'] == null ? undefined : ((value['subQuestions'] as Array<any>).map(PracticeQuestionResponseToJSON)),
        'isParentQuestion': value['isParentQuestion'],
        'subQuestionIdentifier': value['subQuestionIdentifier'],
        'parentQuestionPosition': value['parentQuestionPosition'],
        'isAnswered': value['isAnswered'],
        'timeSpentSeconds': value['timeSpentSeconds'],
    };
}

